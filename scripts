-- Create database
CREATE DATABASE library;
USE library;

-- Create Books table
CREATE TABLE Books (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(100) NOT NULL,
    author VARCHAR(50) NOT NULL,
    publisher VARCHAR(50),
    ISBN VARCHAR(20),
    publication_year INT,
    category VARCHAR(30),
    status ENUM('Available', 'Borrowed') DEFAULT 'Available'
);

-- Create Members table
CREATE TABLE Members (
    member_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(100),
    address VARCHAR(200),
    join_date DATE DEFAULT (CURRENT_DATE),
    membership_status ENUM('Active', 'Inactive') DEFAULT 'Active'
);

-- Create Loans table
CREATE TABLE Loans (
    loan_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT,
    member_id INT,
    loan_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE,
    fine DECIMAL(10,2) DEFAULT 0.00,
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES Members(member_id) ON DELETE CASCADE
);

-- Create Librarians table
CREATE TABLE Librarians (
    librarian_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(100),
    username VARCHAR(50) UNIQUE,
    password VARCHAR(255),
    role ENUM('Admin', 'Staff') DEFAULT 'Staff'
);

-- Create index for better performance
CREATE INDEX idx_book_status ON Books(status);
CREATE INDEX idx_book_title ON Books(title);
CREATE INDEX idx_member_name ON Members(name);
CREATE INDEX idx_loan_dates ON Loans(loan_date, due_date, return_date);

-- Trigger to update book status when borrowed
DELIMITER //
CREATE TRIGGER book_borrowed 
AFTER INSERT ON Loans
FOR EACH ROW
BEGIN
    UPDATE Books SET status = 'Borrowed' WHERE book_id = NEW.book_id;
END //
DELIMITER ;

-- Trigger to update book status when returned
DELIMITER //
CREATE TRIGGER book_returned
AFTER UPDATE ON Loans
FOR EACH ROW
BEGIN
    IF NEW.return_date IS NOT NULL AND OLD.return_date IS NULL THEN
        UPDATE Books SET status = 'Available' WHERE book_id = NEW.book_id;
    END IF;
END //
DELIMITER ;

-- Procedure to calculate fines for overdue books
DELIMITER //
CREATE PROCEDURE CalculateFines(IN fine_rate DECIMAL(10,2))
BEGIN
    UPDATE Loans
    SET fine = DATEDIFF(IFNULL(return_date, CURRENT_DATE), due_date) * fine_rate
    WHERE (return_date > due_date OR (return_date IS NULL AND due_date < CURRENT_DATE));
END //
DELIMITER ;

-- Insert Sample Data
INSERT INTO Books (title, author, publisher, ISBN, publication_year, category) VALUES
('To Kill a Mockingbird', 'Harper Lee', 'HarperCollins', '9780061120084', 1960, 'Fiction'),
('1984', 'George Orwell', 'Penguin Books', '9780451524935', 1949, 'Fiction'),
('The Great Gatsby', 'F. Scott Fitzgerald', 'Scribner', '9780743273565', 1925, 'Fiction'),
('Pride and Prejudice', 'Jane Austen', 'Penguin Classics', '9780141439518', 1813, 'Romance'),
('The Catcher in the Rye', 'J.D. Salinger', 'Little, Brown', '9780316769488', 1951, 'Fiction'),
('The Hobbit', 'J.R.R. Tolkien', 'Houghton Mifflin', '9780547928227', 1937, 'Fantasy'),
('Harry Potter and the Sorcerer\'s Stone', 'J.K. Rowling', 'Scholastic', '9780590353427', 1997, 'Fantasy');

INSERT INTO Members (name, phone, email, address, join_date) VALUES
('John Doe', '9876543210', 'john.doe@example.com', '123 Main St, City', '2024-01-15'),
('Alice Smith', '8765432109', 'alice.smith@example.com', '456 Oak Ave, Town', '2024-02-10'),
('Bob Johnson', '7654321098', 'bob.johnson@example.com', '789 Pine Rd, Village', '2024-03-05'),
('Emily Davis', '6543210987', 'emily.davis@example.com', '321 Cedar Ln, County', '2024-03-15'),
('Michael Brown', '5432109876', 'michael.brown@example.com', '654 Maple Dr, State', '2024-04-01');

INSERT INTO Librarians (name, phone, email, username, password, role) VALUES
('Admin User', '1122334455', 'admin@library.com', 'admin', 'hashed_password_here', 'Admin'),
('Staff User', '5566778899', 'staff@library.com', 'staff', 'hashed_password_here', 'Staff');

INSERT INTO Loans (book_id, member_id, loan_date, due_date, return_date) VALUES
(3, 1, '2025-04-01', '2025-04-15', NULL),  -- Book borrowed, not yet returned
(5, 2, '2025-03-28', '2025-04-11', '2025-04-03'),
(1, 3, '2025-03-30', '2025-04-13', NULL),  -- Book borrowed, not yet returned
(4, 4, '2025-03-25', '2025-04-08', '2025-03-31'),
(6, 5, '2025-04-02', '2025-04-16', NULL);  -- Book borrowed, not yet returned

-- Retrieval Queries

-- Find all currently borrowed books and their borrowers
SELECT Books.book_id, Books.title, Members.name AS Borrower, Loans.loan_date, Loans.due_date
FROM Books 
JOIN Loans ON Books.book_id = Loans.book_id 
JOIN Members ON Loans.member_id = Members.member_id
WHERE Books.status = 'Borrowed';

-- Find overdue books
SELECT Books.title, Members.name, Members.phone, Loans.due_date,
       DATEDIFF(CURRENT_DATE, Loans.due_date) AS days_overdue
FROM Books
JOIN Loans ON Books.book_id = Loans.book_id
JOIN Members ON Loans.member_id = Members.member_id
WHERE Loans.return_date IS NULL AND Loans.due_date < CURRENT_DATE
ORDER BY days_overdue DESC;

-- Check book availability
SELECT book_id, title, author, status
FROM Books
WHERE status = 'Available';

-- Member borrowing history
SELECT Members.name, Books.title, Loans.loan_date, Loans.return_date
FROM Members
JOIN Loans ON Members.member_id = Loans.member_id
JOIN Books ON Loans.book_id = Books.book_id
WHERE Members.member_id = 1;